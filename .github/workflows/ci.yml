name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies and test frontend
        working-directory: frontend
        run: |
          npm install
          npm test

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend tests
        working-directory: backend
        env:
          DJANGO_SETTINGS_MODULE: mycloud.settings.test
        run: |
          python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v3

      - name: Setup SSH
        run: |
          # Create .ssh directory with correct permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Write private key with strict permissions
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add host to known_hosts
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Debug SSH setup
        run: |
          ls -la ~/.ssh
          ssh-keygen -l -f ~/.ssh/id_rsa
          cat ~/.ssh/known_hosts

      - name: Configure SSH
        run: |
          # Ensure SSH agent is running
          eval "$(ssh-agent -s)"

          # Add key to agent with confirmation
          ssh-add ~/.ssh/id_rsa
          ssh-add -l

          # Test connection with verbose output
          ssh -T -v -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} exit

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            set -e
            cd ~/MyCloudApp
            git pull origin main
            docker compose down --remove-orphans
            docker network prune -f
            docker compose build --no-cache
            docker compose up -d
            cd frontend
            npm install
            npm run build
            sudo chmod -R o+r /home/myclouduser/MyCloudApp/frontend/build
            sudo chown -R myclouduser:www-data /home/myclouduser/MyCloudApp/frontend/build
            sudo chmod -R 750 /home/myclouduser/MyCloudApp/frontend/build
            sudo systemctl restart nginx
          "
