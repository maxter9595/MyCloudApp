version: "3.8"

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: my_database
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d my_database"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_net

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_net

  backend:
    build:
      context: ./backend
    volumes:
      # - ./backend:/app
      - ./backend/media:/app/backend/media:rw
      - ./backend/static:/app/backend/static:rw
    entrypoint:
      ["sh", "-c", "chmod +x /app/entrypoint.sh && /app/entrypoint.sh"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:8000/health/"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_net
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=my_database
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - SET_PERMS=true

  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - backend_net

  celery:
    build:
      context: ./backend
    command: celery -A mycloud worker --loglevel=info
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_net

  celery-beat:
    build:
      context: ./backend
    command: celery -A mycloud beat --loglevel=info
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_net

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend_net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  backend_net:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  media_volume:
